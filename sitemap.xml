<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[序列密码]]></title>
      <url>/2017/07/18/%E5%BA%8F%E5%88%97%E5%AF%86%E7%A0%81/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><strong>序列密码</strong><br>序列密码在当今无论是生活中，外交还是军事都应用广泛。<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="什么是序列密码"><a href="#什么是序列密码" class="headerlink" title="什么是序列密码"></a>什么是序列密码</h2><p>　　使用序列密码对某一消息m执行加密操作时一般是先将m分成连续的符合（一般为比特串），m=m1m2m3…;然后使用密钥流k=k1k2k3…中的第i个元素ki对明文消息的第i个元素mi执行加密变换，i=1,2,3…；所有的加密输出连接在一起就构成了对m执行加密后的密文。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6755082-2c5e7c5c635152ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><p>真正意义上的随机数（或者随机事件）在某次产生过程中是按照实验过程中表现的分布概率随机产生，是不可见的。</p>
<h3 id="伪随机数"><a href="#伪随机数" class="headerlink" title="伪随机数"></a>伪随机数</h3><p>计算机中的随机函数是按照一定的算法模拟产生的，其结果是确定的，是可见的，我们可以这样认为这个可预见的结果其出现的概率是100%。所以计算机随机产生的“随机数”并不随机</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6755082-cc410d31a2cd68d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="序列密码的应用场景"><a href="#序列密码的应用场景" class="headerlink" title="序列密码的应用场景"></a>序列密码的应用场景</h2><p><img src="http://upload-images.jianshu.io/upload_images/6755082-0904b51c04970c5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6755082-2a44c8831c394d8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6755082-90083613ebd20cd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6755082-fb60acb9a691bc7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6755082-4b5775e48284e74f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="典型序列密码算法"><a href="#典型序列密码算法" class="headerlink" title="典型序列密码算法"></a>典型序列密码算法</h2><ol>
<li>A5-1算法       </li>
<li>SNOW算法</li>
<li>ZUC算法</li>
<li>Trivium算法</li>
</ol>
</the>]]></content>
      
        <categories>
            
            <category> 密码学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 密码学 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[密码学]]></title>
      <url>/2017/07/18/%E5%AF%86%E7%A0%81%E5%AD%A6/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><strong>密码学</strong><br>密码学是以秘密通信为目的，研究密码编制、密码分析和密钥管理的一门综合性应用科学。<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h2><h3 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h3><p><img src="http://upload-images.jianshu.io/upload_images/6755082-f3efe087eb73a5b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="棋盘密码"><a href="#棋盘密码" class="headerlink" title="棋盘密码"></a>棋盘密码</h3><p><img src="http://upload-images.jianshu.io/upload_images/6755082-bbd6134af995ed51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="网格密码"><a href="#网格密码" class="headerlink" title="网格密码"></a>网格密码</h3><p><img src="http://upload-images.jianshu.io/upload_images/6755082-19daf30407675c2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>　 </p>
<blockquote>
<p>密码学是以秘密通信为目的，研究密码编制、密码分析和密钥管理的一门综合性应用科学。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/6755082-767739c865e20e32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">
　</p>
<blockquote>
<p>密码编码学像盾一样保护自己，研究如何编制密码进行秘密通信的科学，分析学像矛一样，是个研究如何破解对方秘密的科学，密钥管理学是最重要的，它是研究如何产生、分配、管理密钥的科学，三者相辅相成，是一个有机整体。</p>
<h2 id="密码通信的基本结构"><a href="#密码通信的基本结构" class="headerlink" title="密码通信的基本结构"></a>密码通信的基本结构</h2><p><img src="http://upload-images.jianshu.io/upload_images/6755082-d333dd93751ac5f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>密钥一定要保密，其他公开信道上传输，包括加密算法，密文等都是公开信息，也就这些是可以被第三方截获的。</p>
<h2 id="密码学的主要功能"><a href="#密码学的主要功能" class="headerlink" title="密码学的主要功能"></a>密码学的主要功能</h2><h3 id="1-机密性"><a href="#1-机密性" class="headerlink" title="1.机密性"></a>1.机密性</h3><p>　　<br>防止恶意第三方（信道上的EVE）也就是非法授权者获取信息；</p>
<h3 id="2-真实性认证"><a href="#2-真实性认证" class="headerlink" title="2.真实性认证"></a>2.真实性认证</h3><p>　<br>　包括身份认证和完整性认证，比如网购时候会验证一下是否你是合法用户，以及发送的信息是否受到篡改；</p>
<h3 id="3-承诺的不可抵赖性"><a href="#3-承诺的不可抵赖性" class="headerlink" title="3.承诺的不可抵赖性"></a>3.承诺的不可抵赖性</h3><p>　<br>防止否认以前的承诺或行为，例如你签收了快递却不承认是你签收的。</p>
<h2 id="密码学的应用"><a href="#密码学的应用" class="headerlink" title="密码学的应用"></a>密码学的应用</h2><p><img src="http://upload-images.jianshu.io/upload_images/6755082-0846f729851cf05b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</blockquote>
<h2 id="密码与生活息息相关"><a href="#密码与生活息息相关" class="headerlink" title="密码与生活息息相关"></a>密码与生活息息相关</h2><p><img src="http://upload-images.jianshu.io/upload_images/6755082-9fbe23ba6efba9bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</the>]]></content>
      
        <categories>
            
            <category> 密码学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 密码学 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[博客主题使用跟功能添加]]></title>
      <url>/2017/07/07/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E8%B7%9F%E5%8A%9F%E8%83%BD%E6%B7%BB%E5%8A%A0/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><strong>hexo博客主题使用跟功能添加：</strong><br>没写什么东西，百度上的一篇很长的文章，详细概况了主题的各个部分功能添加与使用，感觉非常全面应该可以帮到大多数需要配置主题的朋友们<br><a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h1 id="新主题使用说明"><a href="#新主题使用说明" class="headerlink" title="新主题使用说明"></a>新主题使用说明</h1><p>次要说的主题基于主题 Hexo-Theme-Yilia 修改而来，在此再次感谢原作者 Litten。修复了一些 bugs，改变了大量的样式，添加了不少特性。对原主题百般折腾后，发觉变动越来越大，索性就发布个新主题了，新主题能稍微凸显出博主个性。各种修改折腾大抵还不错。</p>
<h1 id="新主题效果展示"><a href="#新主题效果展示" class="headerlink" title="新主题效果展示"></a>新主题效果展示</h1><p><img src="http://moxfive.coding.me/yelee/src/feat.background.jpg" alt=""></p>
<h1 id="新主题下载及配置教程"><a href="#新主题下载及配置教程" class="headerlink" title="新主题下载及配置教程"></a>新主题下载及配置教程</h1><p>　　　　　　　　　　　　　　<a href="http://moxfive.coding.me/yelee/" target="_blank" rel="external">点击这里查看</a></p>
]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo博客主题部分--标签]]></title>
      <url>/2017/07/07/hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E9%83%A8%E5%88%86%E8%AE%BE%E5%AE%9A%E6%B7%BB%E5%8A%A0/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><strong>hexo博客主题部分–标签：</strong><br>标签作为主题里面一个很重要的组成部分，它的文件配置等等，我想这篇文章应该可以帮到你<br><a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h1><p>在你的G:\Hexo\source里面新建一个文件夹，命名为tags。新建命令如下：</p>
<pre><code>$ hexo new page &quot;tags&quot;
</code></pre><h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h1><p>编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：</p>
<pre><code>title： Tagcloud
data： 2017-07-07 12:12:12
type： &quot;tages&quot;
————
</code></pre><p>注意一下如果，如果你的blog启动了多说、畅言这些评论，默认的页面都会出现评论，要是想关闭的话，就把添加comments，把它的值设置为false。设置如下：</p>
<pre><code>title： Tagcloud
data： 2017-07-07 12:12:12
type： &quot;tages&quot;
comment: false
————
</code></pre><h1 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h1><p>在主题配置文件中添加配置，如下：</p>
<pre><code>menu:
  #主页: /archives
  所有文章: /archives
  网络安全: /
  密码学: /misc
  计算机语言: /python
  关于我: /about
  tags: /tags
</code></pre><p>要是标签在小目录里就去小目录里面添加配置命令就好了。</p>
<p>看一下我的blog标签效果：<br><img src="http://upload-images.jianshu.io/upload_images/6755082-70bcdbb6c1a915e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python的进阶]]></title>
      <url>/2017/07/06/python%E7%9A%84%E8%BF%9B%E9%98%B6/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><strong>测试篇</strong><br>随便写写小测试<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>实验一下，看看效果怎样111111111111111111111111111111111111111<br>111111111111111111111111111111111111111<br>11111111111111111111111111111</p>
<p>的撒啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊<br>333333333333333333333333333333333333333<br>333333333333333333333333333333333333333<br>33</p>
</the>]]></content>
      
        
        <tags>
            
            <tag> misc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python中的汉诺塔递归算法]]></title>
      <url>/2017/07/04/python%E4%B8%AD%E7%9A%84%E6%B1%89%E8%AF%BA%E5%A1%94%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><strong>python中的汉诺塔递归算法</strong><br>第一篇小博客，尽管百度上都有，我还是很认真写的。<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">




<h2 id="什么是汉诺塔"><a href="#什么是汉诺塔" class="headerlink" title="什么是汉诺塔"></a>什么是汉诺塔</h2><p>汉诺塔是将所有盘子（n个）从A柱挪至C柱，中间可以借用B柱，但是最终盘子都得在C柱上，而且需要大盘子在下，小盘子在上</p>
<p><img src="http://images.cnitblog.com/i/585151/201406/241602223308533.gif" alt=""></p>
<h2 id="对应的python代码"><a href="#对应的python代码" class="headerlink" title="对应的python代码"></a>对应的python代码</h2><pre><code>def move(n, a, b, c):
        if n ==1:
             print (a, &apos;--&gt;&apos;, c)
             return
        move(n-1, a, c, b)
        print (a, &apos;--&gt;&apos;, c)
        move(n-1, b, a, c)
    move(n, &apos;A&apos;, &apos;B&apos;, &apos;C&apos;)
</code></pre><p>代码第一行新建一个函数move（n，a，b，c），n代表一共多少个盘子，a、b、c分别代表柱子。下面的if函数说的是，如果就一个盘子，直接把盘子从a移动到c，然后return（返回）；第五行是将n-1个盘子从a经过c移动到b；第六行将a柱的最大盘移动到c柱；第七行是将b柱的盘子经过a移动到c。<br>   递归主要是5、6、7这三行，汉诺塔这个就是按照盘子的多少来不断循环的一个过程。注意不要被参数变化弄糊涂了。</p>
<h2 id="盘子为1、2、3时的结果"><a href="#盘子为1、2、3时的结果" class="headerlink" title="盘子为1、2、3时的结果"></a>盘子为1、2、3时的结果</h2><p>盘子为1个 ：  </p>
<pre><code>A --&gt; C
</code></pre><p> 盘子为2个 ： </p>
<pre><code>A --&gt; B
A --&gt; C
B --&gt; C
</code></pre><p> 盘子为3个：</p>
<pre><code>A --&gt; C
A --&gt; B
C --&gt; B
A --&gt; C
B --&gt; A
B --&gt; C
A --&gt; C
</code></pre></the>]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
