<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[hexo博客主题部分--标签]]></title>
      <url>/2017/07/07/hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E9%83%A8%E5%88%86%E8%AE%BE%E5%AE%9A%E6%B7%BB%E5%8A%A0/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><strong>hexo博客主题部分–标签：</strong><br>标签作为主题里面一个很重要的组成部分，它的文件配置等等，我想这篇文章应该可以帮到你<br><a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h1><p>在你的G:\Hexo\source里面新建一个文件夹，命名为tags。新建命令如下：</p>
<pre><code>$ hexo new page &quot;tags&quot;
</code></pre><h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h1><p>编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：</p>
<pre><code>title： Tagcloud
data： 2017-07-07 12:12:12
type： &quot;tages&quot;
————
</code></pre><p>注意一下如果，如果你的blog启动了多说、畅言这些评论，默认的页面都会出现评论，要是想关闭的话，就把添加comments，把它的值设置为false。设置如下：</p>
<pre><code>title： Tagcloud
data： 2017-07-07 12:12:12
type： &quot;tages&quot;
comment: false
————
</code></pre><h1 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h1><p>在主题配置文件中添加配置，如下：</p>
<pre><code>menu:
  #主页: /archives
  所有文章: /archives
  网络安全: /
  密码学: /misc
  计算机语言: /python
  关于我: /about
  tags: /tags
</code></pre><p>要是标签在小目录里就去小目录里面添加配置命令就好了。</p>
<p>看一下我的blog标签效果：<br><img src="http://upload-images.jianshu.io/upload_images/6755082-70bcdbb6c1a915e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python的进阶]]></title>
      <url>/2017/07/06/python%E7%9A%84%E8%BF%9B%E9%98%B6/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><strong>测试篇</strong><br>随便写写小测试<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>实验一下，看看效果怎样111111111111111111111111111111111111111<br>111111111111111111111111111111111111111<br>11111111111111111111111111111</p>
<p>的撒啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊<br>333333333333333333333333333333333333333<br>333333333333333333333333333333333333333<br>33</p>
</the>]]></content>
      
        
        <tags>
            
            <tag> misc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python中的汉诺塔递归算法]]></title>
      <url>/2017/07/04/python%E4%B8%AD%E7%9A%84%E6%B1%89%E8%AF%BA%E5%A1%94%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><strong>python中的汉诺塔递归算法</strong><br>第一篇小博客，尽管百度上都有，我还是很认真写的。<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">




<h2 id="什么是汉诺塔"><a href="#什么是汉诺塔" class="headerlink" title="什么是汉诺塔"></a>什么是汉诺塔</h2><p>汉诺塔是将所有盘子（n个）从A柱挪至C柱，中间可以借用B柱，但是最终盘子都得在C柱上，而且需要大盘子在下，小盘子在上</p>
<p><img src="http://images.cnitblog.com/i/585151/201406/241602223308533.gif" alt=""></p>
<h2 id="对应的python代码"><a href="#对应的python代码" class="headerlink" title="对应的python代码"></a>对应的python代码</h2><pre><code>def move(n, a, b, c):
        if n ==1:
             print (a, &apos;--&gt;&apos;, c)
             return
        move(n-1, a, c, b)
        print (a, &apos;--&gt;&apos;, c)
        move(n-1, b, a, c)
    move(n, &apos;A&apos;, &apos;B&apos;, &apos;C&apos;)
</code></pre><p>代码第一行新建一个函数move（n，a，b，c），n代表一共多少个盘子，a、b、c分别代表柱子。下面的if函数说的是，如果就一个盘子，直接把盘子从a移动到c，然后return（返回）；第五行是将n-1个盘子从a经过c移动到b；第六行将a柱的最大盘移动到c柱；第七行是将b柱的盘子经过a移动到c。<br>   递归主要是5、6、7这三行，汉诺塔这个就是按照盘子的多少来不断循环的一个过程。注意不要被参数变化弄糊涂了。</p>
<h2 id="盘子为1、2、3时的结果"><a href="#盘子为1、2、3时的结果" class="headerlink" title="盘子为1、2、3时的结果"></a>盘子为1、2、3时的结果</h2><p>盘子为1个 ：  </p>
<pre><code>A --&gt; C
</code></pre><p> 盘子为2个 ： </p>
<pre><code>A --&gt; B
A --&gt; C
B --&gt; C
</code></pre><p> 盘子为3个：</p>
<pre><code>A --&gt; C
A --&gt; B
C --&gt; B
A --&gt; C
B --&gt; A
B --&gt; C
A --&gt; C
</code></pre></the>]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
